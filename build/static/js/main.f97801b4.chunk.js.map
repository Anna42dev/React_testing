{"version":3,"sources":["store/reducers/index.js","store/actionTypes/index.js","containers/routes/dashboard/index.js","apis/apiurl.js","apis/account.js","apis/terminal.js","apis/report.js","apis/index.js","containers/routes/accounts/list/index.js","containers/routes/terminals/list/index.js","containers/routes/reports/index.js","apis/auth.js","containers/routes/profile/password/index.js","containers/routes/index.js","containers/auth/signup/index.js","containers/auth/signin/index.js","store/actions/index.js","containers/auth/resetPass/index.js","containers/index.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["INIT_STATE","navCollapsed","width","window","innerWidth","isLoader","user","store","get","settings","allowInviteOnly","state","action","type","payload","setting","set","Dashboard","props","toast","success","id","className","Component","withRouter","connect","reducer","API_BASE_URL","location","protocol","hostname","port","SIGNIN_URL","CHANGE_PASSWORD_URL","ACCOUNT_LIST_URL","ACCOUNT_ADD_URL","ACCOUNT_REMOVE_URL","ACCOUNT_SET_BALANCE_URL","TERMINAL_LIST_URL","TERMINAL_ADD_URL","TERMINAL_UPDATE_URL","TERMINAL_REMOVE_URL","REPORT_LIST_URL","accountList","params","a","axios","post","API_URL","then","data","catch","error","response","accountAdd","accountRemove","accountSetBalance","terminalList","terminalAdd","terminalUpdate","terminalRemove","reportList","interceptors","use","status","clearAll","Promise","reject","code","message","AccountList","bLoading","bUpdateLoading","accounts","show_new_account","show_set_balance","single_delete_modal_open","getAccountList","bind","addNewAccount","deleteAccount","setBalanceAccount","setBalance","onCloseNewAccountModal","onCloseBalanceModal","this","setState","token","console","log","err","resetError","emailError","event","preventDefault","username","selectedAccount","_id","balance","account","options","Fragment","icon","color","onClick","Header","title","Body","responsive","highlightRowOnHover","hasOutline","verticalAlign","cards","Row","ColHeader","map","index","key","Col","List","size","length","colSpan","alignContent","Label","open","onClose","onCloseSingleDeleteModal","little","showCloseIcon","closeOnEsc","closeOnOverlayClick","align","disabled","singleDelete","loading","onSubmit","Group","Input","required","onChange","target","value","min","React","TerminalList","getTerminalList","terminals","addNewTerminal","vm_id","name","show_new_terminal","updateTerminal","edit_name","terminal_id","selectedTerminal","show_edit_terminal","deleteTerminal","terminal","editTerminal","edit_vmid","onCloseNewTerminalModal","onCloseEditTerminalModal","readOnly","Reports","records","from_date","to_date","getReports","Date","date","_from_date","moment","format","_to_date","document","getElementById","submit","class","label","Select","DatePicker","defaultDate","maxYear","minYear","monthLabels","chooseFromDate","chooseToDate","searchReport","downloadCSV","record","amount","method","style","display","signIn","changePass","signUp","SIGNUP_URL","passwordReset","ACCOUNT_PASSWORD_RESTE_URL","ChangePassword","bUpdating","changePassword","password","new_password","confirm_password","Footer","block","accountDropdownProps","avatarURL","photo","description","email","href","isDivider","adminNavBarItems","to","LinkComponent","NavLink","Routes","showMsg","Wrapper","headerProps","alt","imageURL","accountDropdown","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","Content","path","component","SignUp","updateForm","evt","handleLogin","e","signupSuccess","usernameError","signupError","src","Title","RootComponent","placeholder","SignIn","loginError","passwordError","updateUser","history","push","ResetPass","resetPass","mail","newProps","RestrictedRoute","rest","render","pathname","from","Container","match","url","library","add","fas","initialState","createStore","reducers","App","Boolean","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f97801b4.chunk.js","sourcesContent":["import {\n    TOGGLE_COLLAPSED_NAV,\n    WINDOW_WIDTH,\n    SHOW_LOADER,\n    SET_SETTINGS,\n    UPDATE_USER,\n} from '../actionTypes';\nimport store from 'store';\n\n\nconst INIT_STATE = {\n    navCollapsed: false,\n    width: window.innerWidth,\n    isLoader: false,\n    user: store.get('user'),\n    settings: store.get('settings') || {\n        allowInviteOnly : false,\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n\n    switch (action.type) {\n\n        /**\n         * Ui\n         */\n        \n        case SHOW_LOADER:\n            return {\n                ...state,\n                isLoader: action.payload,\n            };\n\n        case TOGGLE_COLLAPSED_NAV:{\n                return {\n                    ...state,\n                    navCollapsed: action.payload\n                };\n            }\n\n        case WINDOW_WIDTH: {\n            return {\n                ...state,\n                width: action.payload\n            };\n        }\n\n        /** \n         * Settings \n         */\n\n         case SET_SETTINGS:\n             return {\n                 ...state,\n                 setting: action.payload\n             }\n        \n        /**\n         * User\n         */\n\n        case UPDATE_USER:\n\n            store.set('user', action.payload);\n            \n            return {\n                ...state,\n                user: action.payload,\n            };\n\n        \n\n        default:\n            return state;\n\n    }\n\n}","/**\n * setting\n */\nexport const SET_SETTINGS = 'set_settings'\n\n/**\n * user\n */\nexport const UPDATE_USER = 'update_user';\n\n/**\n * ui\n */\nexport const SHOW_FULLLOADER = 'show_full_loader'\nexport const SHOW_LOADER = 'show_loader'\nexport const TOGGLE_COLLAPSED_NAV = 'toggle_collapsed_nav'\nexport const WINDOW_WIDTH = 'window_width';\n\n\n","import React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router-dom'\nimport { toast } from 'react-toastify';\n\nclass Dashboard extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n    \n        }\n    }\n\n    componentDidMount() {\n        toast.success(\"Wow so easy !\");\n    }\n\n    render() {\n        \n        return (\n            <div id=\"dashboard\" className=\"p-4\">\n                <div className=\"container-fluid\">\n                    dashbaord\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reducer) => {\n    const {user} = reducer; \n    return {user};\n}\n\nexport default withRouter(connect(mapStateToProps, {\n    \n})(Dashboard))\n","export const API_BASE_URL = `${window.location.protocol}//${window.location.hostname}` + (window.location.port ? ':' + window.location.port: '') + '/api'\nexport default {\n\n    /**\n     * Auth \n     */    \n    SIGNIN_URL: `${API_BASE_URL}/auth/login`,\n    CHANGE_PASSWORD_URL: `${API_BASE_URL}/auth/changepass`,\n    // SIGNUP_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/AccountRegister`,\n    // ACCOUNT_PASSWORD_RESTE_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/AccountPasswordReset`,\n    // VERIFY_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/verify`,\n    // RESEND_ACCOUNT_VERIFYCODE_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/resend_verifycode`,\n    // FORGOTPASS_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/forgot_password`,\n    // RESETPASS_URL: `${process.env.ACCOUNT_MANAGEMENT_SERVER_URL}/reset_password`,\n\n    /**\n     * Account\n     */\n    ACCOUNT_LIST_URL: `${API_BASE_URL}/account`,\n    ACCOUNT_ADD_URL: `${API_BASE_URL}/account/add`,\n    ACCOUNT_REMOVE_URL: `${API_BASE_URL}/account/delete`,\n    ACCOUNT_SET_BALANCE_URL: `${API_BASE_URL}/account/balance`,\n\n    /**\n     * Terminal\n     */\n    TERMINAL_LIST_URL: `${API_BASE_URL}/terminal`,\n    TERMINAL_ADD_URL: `${API_BASE_URL}/terminal/add`,\n    TERMINAL_UPDATE_URL: `${API_BASE_URL}/terminal/update`,\n    TERMINAL_REMOVE_URL: `${API_BASE_URL}/terminal/delete`,\n\n    /**\n     * Account\n     */\n    REPORT_LIST_URL: `${API_BASE_URL}/report`\n    \n}","import axios from 'axios';\nimport API_URL from './apiurl'\n\n\nexport const accountList = async (params) => {\n\n    return await axios.post(`${API_URL.ACCOUNT_LIST_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const accountAdd = async (params) => {\n\n    return await axios.post(`${API_URL.ACCOUNT_ADD_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const accountRemove = async (params) => {\n\n    return await axios.post(`${API_URL.ACCOUNT_REMOVE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const accountSetBalance = async (params) => {\n\n    return await axios.post(`${API_URL.ACCOUNT_SET_BALANCE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};","import axios from 'axios';\nimport API_URL from './apiurl'\n\n\nexport const terminalList = async (params) => {\n\n    return await axios.post(`${API_URL.TERMINAL_LIST_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const terminalAdd = async (params) => {\n\n    return await axios.post(`${API_URL.TERMINAL_ADD_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const terminalUpdate = async (params) => {\n\n    return await axios.post(`${API_URL.TERMINAL_UPDATE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const terminalRemove = async (params) => {\n\n    return await axios.post(`${API_URL.TERMINAL_REMOVE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};","import axios from 'axios';\nimport API_URL from './apiurl'\n\nexport const reportList = async (params) => {\n\n    return await axios.post(`${API_URL.REPORT_LIST_URL}`, params)\n        .then(data => {\n            return data.data\n        })\n        .catch(error => { throw error.response });\n};","import axios from 'axios';\nimport store from 'store'\n\naxios.interceptors.response.use( (response) => {\n    return response;\n}, (error) => {\n    if (error.response) {\n        \n        if (error.response.status === 404) {\n            store.clearAll();\n            //window.location.href = \"/signin\"\n        }\n    \n        if (process.env.NODE_ENV === \"development\"){\n\n            console.log(error.response)\n        }\n        \n        return Promise.reject(error);\n    } else {\n        \n        return Promise.reject({\n            response: {\n                data: {code: 320, message: 'Network connection lost'}}\n            }\n        )\n    }\n\n});\n\nexport * from './account'\nexport * from './terminal'\nexport * from './report'","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport {\n    Page,\n    Table,\n    Card,\n    Button,\n    Grid,\n    Form,\n    Dimmer\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\nimport Modal from 'react-responsive-modal';\n\nimport { accountList, accountAdd, accountRemove, accountSetBalance, deviceBatchRemove, deviceConfigure } from 'apis'\n\nclass AccountList extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {\n            bLoading: false,            \n            bUpdateLoading: false,\n            accounts: [],\n\n            show_new_account: false,\n            show_set_balance: false,\n            single_delete_modal_open: false            \n        }\n\n        this.getAccountList = this.getAccountList.bind(this);\n        this.addNewAccount = this.addNewAccount.bind(this);\n        this.deleteAccount = this.deleteAccount.bind(this);\n        this.setBalanceAccount = this.setBalanceAccount.bind(this);\n        this.setBalance = this.setBalance.bind(this);\n        this.onCloseNewAccountModal = this.onCloseNewAccountModal.bind(this);\n        this.onCloseBalanceModal = this.onCloseBalanceModal.bind(this);\n    }\n\n    componentDidMount() {\n        this.getAccountList();\n    }\n\n    getAccountList() {\n        this.setState({ \n            bLoading: true\n        });\n\n        accountList({\n            token: this.props.user.token\n        }).then(accounts => {\n\n            this.setState({ \n                bLoading: false,\n                accounts: accounts\n            });\n\n            console.log(accounts);\n\n        }).catch( err => {            \n            this.setState({ bLoading: false });\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    addNewAccount(event) {\n        event.preventDefault();\n\n        const { username } = this.state;\n\n        this.setState({ bUpdateLoading: true });\n\n        accountAdd({\n            token: this.props.user.token,\n            username: username\n        }).then(accounts => {\n\n            this.setState({ \n                bUpdateLoading: false,\n                show_new_account: false,\n                accounts: accounts\n            });\n\n            console.log(accounts);\n\n        }).catch( err => {            \n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    singleDelete() {\n        this.setState({ bUpdateLoading: true });\n\n        accountRemove({\n            token: this.props.user.token,\n            id: this.selectedAccount._id\n        }).then(accounts => {\n            toast.success(\"Accunt was removed.\");\n            this.setState({ \n                bUpdateLoading: false,\n                single_delete_modal_open: false,\n                accounts: accounts\n            });\n\n        }).catch( err => {\n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 403:\n                    toast.error(\"Invalid parameters, account id not present.\")\n                    break;\n\n                case 500:\n                    toast.error(\"Internal server error\");\n                    break;\n            }\n        });\n    }\n\n    setBalance(event) {\n        event.preventDefault();\n\n        const { balance } = this.state;\n\n        this.setState({ bUpdateLoading: true });\n\n        accountSetBalance({\n            token: this.props.user.token,\n            id: this.selectedAccount._id,\n            balance: balance\n        }).then(accounts => {\n            toast.success(\"Balance was set.\");\n            this.setState({ \n                bUpdateLoading: false,\n                show_set_balance: false,\n                accounts: accounts\n            });\n\n        }).catch( err => {\n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 403:\n                    toast.error(\"Invalid parameters, account id not present.\")\n                    break;\n\n                case 500:\n                    toast.error(\"Internal server error\");\n                    break;\n            }\n        });\n    }\n\n    deleteAccount(account) {\n        this.selectedAccount = account;\n        this.setState({ single_delete_modal_open: true });\n    }\n\n    setBalanceAccount(account) {\n        this.selectedAccount = account;\n        this.setState({ show_set_balance: true });\n    }\n\n    onCloseNewAccountModal() {\n        this.setState({ show_new_account: false });\n    }\n\n    onCloseSingleDeleteModal() {\n        this.setState({ single_delete_modal_open: false });\n    }\n\n    onCloseBalanceModal() {\n        this.setState({ show_set_balance: false });\n    }\n    \n\n    render () {\n        const { bLoading, bUpdateLoading, accounts, show_new_account, show_set_balance, single_delete_modal_open } = this.state;\n        \n        \n        const options = (\n            <React.Fragment>\n                <Button\n                    icon=\"plus\"\n                    color=\"primary\"\n                    onClick={() => this.setState({ show_new_account: true })}\n                >New Account</Button>\n            </React.Fragment>\n        );\n        return (\n\n            <div className=\"page signin\">\n                <Page.Header\n                    title=\"Accounts\"\n                    options={options}\n                />\n                \n                <Card>\n                    <Card.Body>\n                        <Table\n                            responsive\n                            highlightRowOnHover\n                            hasOutline\n                            verticalAlign=\"center\"\n                            cards\n                            className=\"text-nowrap\">\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.ColHeader>Account ID</Table.ColHeader>\n                                    <Table.ColHeader>Account Name</Table.ColHeader>\n                                    <Table.ColHeader>Balance</Table.ColHeader>\n                                    <Table.ColHeader>Actions</Table.ColHeader>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {accounts.map((account, index) => (\n                                <Table.Row key={index}>\n                                    <Table.Col>{account._id}</Table.Col>\n                                    <Table.Col>{account.username}</Table.Col>\n                                    <Table.Col>{account.balance}</Table.Col>\n                                    <Table.Col>\n                                        <Button.List>\n                                            <Button\n                                                size=\"sm\"\n                                                color=\"secondary\"\n                                                onClick={() => this.setBalanceAccount(account)}\n                                            >\n                                                Set Balance\n                                            </Button>\n                                            \n                                            <Button color=\"danger\" size=\"sm\" icon=\"trash-2\" onClick={() => this.deleteAccount(account)} />\n                                        </Button.List>\n                                        \n                                    </Table.Col>\n                                </Table.Row>\n                                ))}\n                                {accounts.length === 0 && !bLoading &&\n                                <Table.Row>\n                                    <Table.Col colSpan=\"4\" alignContent=\"center\"><Form.Label>No Accounts</Form.Label></Table.Col>\n                                </Table.Row>\n                                }\n                            </Table.Body>\n                        </Table>\n                    </Card.Body>\n                </Card>\n                \n\n                <Modal open={single_delete_modal_open} onClose={this.onCloseSingleDeleteModal.bind(this)} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Confirmation</h2>\n                    <p>\n                        Are you sure to delete this account? This action can't be undone.\n                    </p>\n                    <Button.List align=\"right\">\n                        <Button color=\"secondary\" onClick={this.onCloseSingleDeleteModal.bind(this)} disabled={bUpdateLoading}>Cancel</Button>\n                        <Button color=\"primary\" onClick={this.singleDelete.bind(this)} loading={bUpdateLoading}>Yes, delete</Button>\n                    </Button.List>\n                </Modal>\n\n                <Modal open={show_new_account} onClose={this.onCloseNewAccountModal.bind(this)} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Add New Account</h2>\n                    <p>\n                        Please input account's username and click 'Submit'. <br />\n                        Initially account's balance will be 0.\n                    </p>\n                    <Form onSubmit={this.addNewAccount}>\n                        <Form.Group>\n                            <Form.Label>User Name</Form.Label>\n                            <Form.Input type=\"text\" required onChange={(event) => this.setState({username: event.target.value})} />\n                        </Form.Group>\n                        <Button.List align=\"right\">\n                            <Button type=\"button\" color=\"secondary\" disabled={bUpdateLoading} onClick={this.onCloseNewAccountModal.bind(this)}>Cancel</Button>\n                            <Button color=\"primary\" loading={bUpdateLoading}>Submit</Button>\n                        </Button.List>\n                    </Form>\n                </Modal>\n\n                <Modal open={show_set_balance} onClose={this.onCloseBalanceModal.bind(this)} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Set Balance</h2>\n                    <p>\n                        Please input account balance and click 'Save'.\n                    </p>\n                    <Form onSubmit={this.setBalance}>\n                        <Form.Group>\n                            <Form.Label>Balance</Form.Label>\n                            <Form.Input type=\"number\" min=\"0\" required onChange={(event) => this.setState({balance: event.target.value})} />\n                        </Form.Group>\n                        <Button.List align=\"right\">\n                            <Button type=\"button\" color=\"secondary\" disabled={bUpdateLoading} onClick={this.onCloseBalanceModal.bind(this)}>Cancel</Button>\n                            <Button color=\"primary\" loading={bUpdateLoading}>Save</Button>\n                        </Button.List>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    \n}) (AccountList);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport {\n    Page,\n    Table,\n    Card,\n    Button,\n    Form\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\nimport Modal from 'react-responsive-modal';\n\nimport { terminalList, terminalAdd, terminalRemove, terminalUpdate } from 'apis'\n\nclass TerminalList extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {\n            bLoading: false,            \n            bUpdateLoading: false,\n            terminals: [],\n\n            vm_id: \"\",\n            name: \"\",\n            edit_name: \"\",\n            show_new_terminal: false,\n            show_edit_terminal: false,\n            single_delete_modal_open: false            \n        }\n    }\n\n    componentDidMount() {\n        this.getTerminalList();\n    }\n\n    getTerminalList = () => {\n        this.setState({ \n            bLoading: true\n        });\n\n        terminalList({\n            token: this.props.user.token\n        }).then(terminals => {\n\n            this.setState({ \n                bLoading: false,\n                terminals: terminals\n            });            \n\n        }).catch( err => {            \n            this.setState({ bLoading: false });\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    addNewTerminal = (event) => {\n        event.preventDefault();\n\n        const { vm_id, name } = this.state;\n\n        this.setState({ bUpdateLoading: true });\n\n        terminalAdd({\n            token: this.props.user.token,\n            vm_id: vm_id,\n            name: name\n        }).then(terminals => {\n\n            toast.success(\"Terminal was added successfully.\")\n            this.setState({ \n                bUpdateLoading: false,\n                show_new_terminal: false,\n                terminals: terminals\n            });\n\n        }).catch( err => {            \n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 400:\n                    toast.error(\"Terminal id is already in use.\")\n                    break;\n\n                case 500:\n                    toast.error(\"Internal server error\")\n                    break;\n            }\n        });\n    }\n\n    updateTerminal = (event) => {\n        event.preventDefault()\n\n        const { edit_name } = this.state;\n\n        this.setState({ bUpdateLoading: true });\n\n        terminalUpdate({\n            token: this.props.user.token,\n            name: edit_name,\n            terminal_id: this.selectedTerminal._id\n        }).then(terminals => {\n\n            toast.success(\"Terminal was updated successfully.\")\n            this.setState({ \n                bUpdateLoading: false,\n                show_edit_terminal: false,\n                terminals: terminals\n            });\n\n        }).catch( err => {            \n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 403:\n                    toast.error(\"Invalid parameters, terminal id not present.\")\n                    break;\n\n                case 500:\n                    toast.error(\"Internal server error\")\n                    break;\n            }\n        });\n    }\n\n    singleDelete = () => {\n        this.setState({ bUpdateLoading: true });\n\n        terminalRemove({\n            token: this.props.user.token,\n            id: this.selectedTerminal._id\n        }).then(terminals => {\n            toast.success(\"Terminal was removed.\");\n            this.setState({ \n                bUpdateLoading: false,\n                single_delete_modal_open: false,\n                terminals: terminals\n            });\n\n        }).catch( err => {\n            this.setState({ bUpdateLoading: false });\n\n            switch(err.status) {\n                case 403:\n                    toast.error(\"Invalid parameters, terminal id not present.\")\n                    break;\n\n                case 500:\n                    toast.error(\"Internal server error\");\n                    break;\n            }\n        });\n    }\n\n    deleteTerminal = (terminal) => {\n        this.selectedTerminal = terminal;\n        this.setState({ single_delete_modal_open: true });\n    }\n\n    editTerminal = (terminal) => {\n        this.selectedTerminal = terminal;\n        this.setState({\n            edit_name: terminal.name,\n            edit_vmid: terminal.vm_id,\n            show_edit_terminal: true\n        })\n    }\n\n    onCloseNewTerminalModal = () => {\n        this.setState({ show_new_terminal: false });\n    }\n\n    onCloseEditTerminalModal = () => {\n        this.setState({ show_edit_terminal: false });\n    }\n\n    onCloseSingleDeleteModal = () => {\n        this.setState({ single_delete_modal_open: false });\n    }\n\n\n    render () {\n        const { bLoading, bUpdateLoading, terminals, show_new_terminal, show_edit_terminal, single_delete_modal_open,\n                edit_name, edit_vmid } = this.state;\n        \n        \n        const options = (\n            <React.Fragment>\n                <Button\n                    icon=\"plus\"\n                    color=\"primary\"\n                    onClick={() => this.setState({ show_new_terminal: true })}\n                >New Terminal</Button>\n            </React.Fragment>\n        );\n        return (\n\n            <div className=\"page signin\">\n                <Page.Header\n                    title=\"Terminals\"\n                    options={options}\n                />\n                \n                <Card>\n                    <Card.Body>\n                        <Table\n                            responsive\n                            highlightRowOnHover\n                            hasOutline\n                            verticalAlign=\"center\"\n                            cards\n                            className=\"text-nowrap\">\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.ColHeader>Terminal ID</Table.ColHeader>\n                                    <Table.ColHeader>Terminal Name</Table.ColHeader>\n                                    <Table.ColHeader>Actions</Table.ColHeader>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {terminals.map((terminal, index) => (\n                                <Table.Row key={index}>\n                                    <Table.Col>{terminal.vm_id}</Table.Col>\n                                    <Table.Col>{terminal.name}</Table.Col>\n                                    <Table.Col>\n                                        <Button.List>\n                                            <Button color=\"primary\" size=\"sm\" icon=\"edit\" onClick={() => this.editTerminal(terminal)} />\n                                            <Button color=\"danger\" size=\"sm\" icon=\"trash-2\" onClick={() => this.deleteTerminal(terminal)} />\n                                        </Button.List>\n                                        \n                                    </Table.Col>\n                                </Table.Row>\n                                ))}\n                                {terminals.length === 0 && !bLoading &&\n                                <Table.Row>\n                                    <Table.Col colSpan=\"4\" alignContent=\"center\"><Form.Label>No Terminals</Form.Label></Table.Col>\n                                </Table.Row>\n                                }\n                            </Table.Body>\n                        </Table>\n                    </Card.Body>\n                </Card>\n\n                <Modal open={single_delete_modal_open} onClose={this.onCloseSingleDeleteModal} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Confirmation</h2>\n                    <p>\n                        Are you sure to delete this terminal? This action can't be undone.\n                    </p>\n                    <Button.List align=\"right\">\n                        <Button color=\"secondary\" onClick={this.onCloseSingleDeleteModal} disabled={bUpdateLoading}>Cancel</Button>\n                        <Button color=\"primary\" onClick={this.singleDelete} loading={bUpdateLoading}>Yes, delete</Button>\n                    </Button.List>\n                </Modal>\n\n                <Modal open={show_edit_terminal} onClose={this.onCloseEditTerminalModal} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Update Terminal</h2>\n                    <p>\n                        Please input terminal id, terminal name and click 'Submit'. <br />\n                    </p>\n                    <Form onSubmit={this.updateTerminal}>\n                        <Form.Group>\n                            <Form.Label>Terminal ID</Form.Label>\n                            <Form.Input type=\"text\" readOnly value={edit_vmid} required onChange={(event) => this.setState({vm_id: event.target.value})} />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Terminal Name</Form.Label>\n                            <Form.Input type=\"text\" value={edit_name} required onChange={(event) => this.setState({edit_name: event.target.value})} />\n                        </Form.Group>\n\n                        <Button.List align=\"right\">\n                            <Button type=\"button\" color=\"secondary\" disabled={bUpdateLoading} onClick={this.onCloseEditTerminalModal}>Cancel</Button>\n                            <Button color=\"primary\" loading={bUpdateLoading}>Submit</Button>\n                        </Button.List>\n                    </Form>\n                </Modal>\n\n                <Modal open={show_new_terminal} onClose={this.onCloseNewTerminalModal} little \n                    showCloseIcon={false} closeOnEsc={false} closeOnOverlayClick={false}>\n                    <h2>Add New Terminal</h2>\n                    <p>\n                        Please input terminal id, terminal name and click 'Submit'. <br />\n                    </p>\n                    <Form onSubmit={this.addNewTerminal}>\n                        <Form.Group>\n                            <Form.Label>Terminal ID</Form.Label>\n                            <Form.Input type=\"text\" required onChange={(event) => this.setState({vm_id: event.target.value})} />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Terminal Name</Form.Label>\n                            <Form.Input type=\"text\" required onChange={(event) => this.setState({name: event.target.value})} />\n                        </Form.Group>\n\n                        <Button.List align=\"right\">\n                            <Button type=\"button\" color=\"secondary\" disabled={bUpdateLoading} onClick={this.onCloseNewTerminalModal}>Cancel</Button>\n                            <Button color=\"primary\" loading={bUpdateLoading}>Submit</Button>\n                        </Button.List>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    \n}) (TerminalList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport {\n    Page,\n    Table,\n    Card,\n    Form,\n    Grid,\n    Button\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\n\nimport { reportList, accountList } from 'apis'\nimport { API_BASE_URL } from 'apis/apiurl'\n\nclass Reports extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {        \n            records: [],\n            accounts: [],\n            account: \"\",\n            from_date: \"\",\n            to_date: \"\"\n        }\n\n        this.getReports = this.getReports.bind(this);\n        this.getAccountList = this.getAccountList.bind(this);\n    }\n\n    componentDidMount() {\n        this.getReports();\n        this.getAccountList();\n    }\n\n    getReports() {\n\n        reportList({\n            token: this.props.user.token\n        }).then(records => {\n\n            this.setState({ \n                records: records\n            });\n\n            if (!this.state.from_date || !this.state.to_date) {\n                if (records.length > 0) {\n                    this.setState({\n                        from_date: new Date(records[records.length - 1].date),\n                        to_date: new Date(records[0].date)\n                    })\n                    \n                } else {\n                    this.setState({\n                        from_date: new Date(),\n                        to_date: new Date()\n                    })\n                }\n            }\n\n        }).catch( err => {\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    getAccountList() {\n        accountList({\n            token: this.props.user.token\n        }).then(accounts => {\n\n            this.setState({                \n                accounts: accounts\n            });            \n\n        }).catch( err => {\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    searchReport() {\n        const { account, from_date, to_date } = this.state;\n        const _from_date = moment(from_date).format(\"YYYY-MM-DD\") + \" 00:00:00\";\n        const _to_date = moment(to_date).format(\"YYYY-MM-DD\") + \" 23:59:59\";\n\n        reportList({\n            token: this.props.user.token,\n            account: account,\n            from_date: _from_date,\n            to_date: _to_date\n        }).then(records => {\n\n            this.setState({ \n                records: records\n            });\n\n        }).catch( err => {\n\n            switch(err.status) {\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n\n    downloadCSV() {\n        const { account, from_date, to_date } = this.state;\n        const _from_date = moment(from_date).format(\"YYYY-MM-DD\") + \" 00:00:00\";\n        const _to_date = moment(to_date).format(\"YYYY-MM-DD\") + \" 23:59:59\";\n\n        document.getElementById(\"export_account\").value = account;\n        document.getElementById(\"export_from_date\").value = _from_date;\n        document.getElementById(\"export_to_date\").value = _to_date;\n\n        document.getElementById(\"export-form\").submit();\n    }\n\n    chooseFromDate(value) {\n        this.setState({ from_date: value });\n    }\n\n    chooseToDate(value) {\n        this.setState({ to_date: value });\n    }\n\n    render () {\n        var { records, accounts, from_date, to_date } = this.state;\n\n        console.log(from_date)\n\n        return (\n\n            <div className=\"page signin\">\n                <Page.Header\n                    title=\"Reports\"\n                />\n                \n                <Card>\n                    <Card.Body>\n                        {from_date && \n                        <Grid.Row>\n                            <div class=\"col-xs-12 col-sm-12 col-md-4 col-lg-4 col-xl-4\">\n                                <Form.Group label=\"Account\">\n                                    <Form.Select onChange={(event) => this.setState({ account: event.target.value })}>\n                                        <option value=\"\">All Accounts</option>\n                                        {accounts.map((account, index) => (\n                                        <option key={index} value={account._id}>{account.username}</option>\n                                        ))}\n                                    </Form.Select>    \n                                </Form.Group>\n                            </div>\n                            \n                            <div class=\"col-xs-12 col-sm-12 col-md-4 col-lg-4 col-xl-4\">\n                                <Form.Group label=\"From\">\n                                    <Form.DatePicker\n                                        defaultDate={from_date?from_date:new Date()}\n                                        format=\"mm/dd/yyyy\"\n                                        maxYear={2100}\n                                        minYear={2020}\n                                        monthLabels={[\n                                        'January',\n                                        'February',\n                                        'March',\n                                        'April',\n                                        'May',\n                                        'June',\n                                        'July',\n                                        'August',\n                                        'September',\n                                        'October',\n                                        'November',\n                                        'December'\n                                        ]}\n                                        onChange={this.chooseFromDate.bind(this)}\n                                    />\n                                </Form.Group>\n                            </div>\n\n                            <div class=\"col-xs-12 col-sm-12 col-md-4 col-lg-4 col-xl-4\">\n                                <Form.Group label=\"To\">\n                                    <Form.DatePicker\n                                        defaultDate={to_date?to_date:new Date()}\n                                        format=\"mm/dd/yyyy\"\n                                        maxYear={2100}\n                                        minYear={2020}\n                                        monthLabels={[\n                                        'January',\n                                        'February',\n                                        'March',\n                                        'April',\n                                        'May',\n                                        'June',\n                                        'July',\n                                        'August',\n                                        'September',\n                                        'October',\n                                        'November',\n                                        'December'\n                                        ]}\n                                        onChange={this.chooseToDate.bind(this)}\n                                    />\n                                </Form.Group>\n                            </div>\n                            \n                        </Grid.Row>\n                        }\n                        \n                        {from_date && \n                        <Grid.Row>\n                            <Grid.Col>\n                                <Button.List align=\"right\">\n                                    <Button color=\"primary\" icon=\"search\" onClick={this.searchReport.bind(this)}>Search</Button>\n                                    <Button color=\"primary\" icon=\"download\" onClick={this.downloadCSV.bind(this)}>Download CSV</Button>\n                                </Button.List>\n                            </Grid.Col>\n                            \n                        </Grid.Row>\n                        }\n\n                        <Grid.Row>\n                            <Table\n                                responsive\n                                highlightRowOnHover\n                                hasOutline\n                                verticalAlign=\"center\"\n                                cards\n                                className=\"text-nowrap\">\n                                <Table.Header>\n                                    <Table.Row>\n                                        <Table.ColHeader>Account ID</Table.ColHeader>\n                                        <Table.ColHeader>Account Name</Table.ColHeader>\n                                        <Table.ColHeader>Terminal ID</Table.ColHeader>\n                                        <Table.ColHeader>Pay Amount</Table.ColHeader>\n                                        <Table.ColHeader>Pay Date</Table.ColHeader>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {records.map((record, index) => (\n                                    <Table.Row key={index}>\n                                        <Table.Col>{record.account && record.account._id}</Table.Col>\n                                        <Table.Col>{record.account && record.account.username}</Table.Col>\n                                        <Table.Col>{record.vm_id}</Table.Col>\n                                        <Table.Col>{record.amount}</Table.Col>\n                                        <Table.Col>{moment(record.date).format('YYYY-MM-DD HH:mm:ss')}</Table.Col>\n                                    </Table.Row>\n                                    ))}\n                                    {records.length === 0 &&\n                                    <Table.Row>\n                                        <Table.Col colSpan=\"4\" alignContent=\"center\"><Form.Label>No Reports</Form.Label></Table.Col>\n                                    </Table.Row>\n                                    }\n                                </Table.Body>\n                            </Table>\n                        </Grid.Row>\n                    </Card.Body>\n                </Card>\n\n                <form method=\"post\" id=\"export-form\" action={API_BASE_URL + \"/report/export\"} style={{display:'none'}}>\n                    <input type=\"text\" id=\"export_account\" name=\"account\" />\n                    <input type=\"text\" id=\"export_from_date\" name=\"from_date\" />\n                    <input type=\"text\" id=\"export_to_date\" name=\"to_date\" />\n                    <input type=\"text\" name=\"token\" value={this.props.user.token} />\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    \n}) (Reports);\n","import axios from 'axios';\nimport API_URL from './apiurl'\n\nexport const signIn = async (params) => {\n\n    return await axios.post(`${API_URL.SIGNIN_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const changePass = async (params) => {\n\n    return await axios.post(`${API_URL.CHANGE_PASSWORD_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\n\nexport const signUp = async (params) => {\n\n    return await axios.post(`${API_URL.SIGNUP_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const passwordReset = async (params) => {\n\n    return await axios.post(`${API_URL.ACCOUNT_PASSWORD_RESTE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response });\n};\n\nexport const verify = async (params) => {\n\n    return await axios.post(`${API_URL.VERIFY_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response.data });\n};\n\nexport const resendAccountVerifyCode = async (params) => {\n\n    return await axios.post(`${API_URL.RESEND_ACCOUNT_VERIFYCODE_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response.data });\n};\n\nexport const forgotPass = async (params) => {\n\n    return await axios.post(`${API_URL.FORGOTPASS_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response.data });\n};\n\nexport const resetPass = async (params) => {\n\n    return await axios.post(`${API_URL.RESETPASS_URL}`, params)\n        .then(data => data.data)\n        .catch(error => { throw error.response.data });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport {\n    Form,\n    Card,\n    Button\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\n\nimport { changePass } from 'apis/auth';\n\nclass ChangePassword extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {\n            bUpdating: false\n        }\n\n        this.changePassword = this.changePassword.bind(this)\n    }\n\n    changePassword(event) {\n        event.preventDefault();\n\n        const { password, new_password, confirm_password } = this.state;\n\n        if (new_password !== confirm_password) return;\n\n        this.setState({ bUpdating: true });\n\n        changePass({\n            token: this.props.user.token,\n            password: password,\n            new_password: new_password\n        }).then(data => {\n            this.setState({ bUpdating: false });\n            toast.success(\"Changed password successfully.\")\n\n        }).catch( err => {            \n            this.setState({ bUpdating: false });\n\n            switch(err.status) {\n                case 403:\n                    toast.error(\"Invalid passsword!\");\n                    break;\n\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n    \n    render () {\n        const { bUpdating, new_password, confirm_password } = this.state;\n\n        return (\n\n            <React.Fragment>\n                <div className=\"page-header\">\n                    <h1 className=\"page-title\">\n                        Change Password\n                    </h1>\n                </div>\n\n                <div className=\"col-sm-6 col-12 ml-auto mx-auto\">\n                    <Card>\n                        <Card.Body>\n                            <Form onSubmit={this.changePassword}>\n                                <Form.Group>\n                                    <Form.Label>Current Password</Form.Label>\n                                    <Form.Input type=\"password\" required onChange={(event) => this.setState({password: event.target.value})} />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>New Password</Form.Label>\n                                    <Form.Input type=\"password\" required onChange={(event) => this.setState({new_password: event.target.value})} />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>Confirm Password</Form.Label>\n                                    <Form.Input type=\"password\" required error={new_password !== confirm_password} onChange={(event) => this.setState({confirm_password: event.target.value})} />\n                                </Form.Group>\n                                <Form.Footer>\n                                    <Button color=\"primary\" icon=\"save\" loading={bUpdating} block>\n                                        Change Password\n                                    </Button>\n                                </Form.Footer>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    \n}) (ChangePassword);\n","import React from 'react';\nimport store from 'store'\nimport {withRouter, Redirect, NavLink} from 'react-router-dom'\nimport { Route, Switch} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {\n    Site,\n    Page,\n    RouterContextProvider,\n} from 'tabler-react';\n\nimport Dashboard from './dashboard';\nimport AccountList from './accounts/list';\nimport TerminalList from './terminals/list';\nimport Reports from './reports';\nimport ChangePassword from './profile/password';\n\nimport {\n    \n} from 'store/actions';\n\nconst accountDropdownProps = (user) => ({\n    avatarURL: \"/uploads/\" + user.photo,\n    name: `${user.user.username}`,\n    description: `${user.user.email}`,\n    options: [\n        { icon: \"lock\", value: \"Change Password\", onClick: () => {window.location.href = \"/changepass\";}},\n        { isDivider: true },\n        // { icon: \"help-circle\", value: \"Need help?\" },\n        { icon: \"log-out\", value: \"Sign out\", onClick: () => { store.clearAll(); window.location.href = \"/signin\";}},\n    ],\n});\n\nconst adminNavBarItems = [{\n    value: 'Accounts',\n    to: '/accounts',\n    icon: 'users',\n    LinkComponent: withRouter(NavLink),\n}, {\n    value: 'Terminals',\n    to: '/terminals',\n    icon: 'hard-drive',\n    LinkComponent: withRouter(NavLink),\n}, {\n    value: 'Reports',\n    to: '/reports',\n    icon: 'file',\n    LinkComponent: withRouter(NavLink),\n}];\n\nclass Routes extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            showMsg: false,\n        }\n    }\n\n    componentWillMount(){\n        \n    }\n\n    componentDidMount(){\n        \n    }\n\n    componentDidUpdate () {\n        \n    }\n\n    render() {\n        const {user} = this.props;\n        console.log(\"user\", user)\n\n        return (\n            <Site.Wrapper\n                headerProps={{\n                    href: \"/\",\n                    alt: \"Loop\",\n                    imageURL: \"/authback.png\",\n                    accountDropdown: accountDropdownProps(user),\n                }}\n                navProps={{ itemsObjects: adminNavBarItems }}\n                routerContextComponentType={withRouter(RouterContextProvider)}\n            >\n                <Page.Content>\n                    <Switch>\n                        <Route path='/dashboard' component={Dashboard} /> \n                        <Route path='/accounts' component={AccountList} /> \n                        <Route path='/terminals' component={TerminalList} /> \n                        <Route path='/reports' component={Reports} />\n                        <Route path='/changepass' component={ChangePassword} />\n                    </Switch>\n                </Page.Content>\n            </Site.Wrapper>\n        );\n    }\n}\n\n\nconst mapStateToProps = (reducer) => {\n    const { isLoader, user} = reducer;\n    return {isLoader, user}\n};\nexport default withRouter(connect(mapStateToProps, {\n    \n})(Routes));","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Form,\n    FormTextInput,\n    Card,\n    Button,\n    Alert\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\nimport './index.scss'\n\nimport { signUp } from '../../../apis/auth';\n\nclass SignUp extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {\n            bLoading: false\n        }\n\n        this.handleLogin = this.handleLogin.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount(){\n        \n    }\n\n    updateForm = evt => {\n        this.setState({\n            [evt.target.name]: evt.target.value,\n        });\n    };\n    \n    handleLogin(e) {\n        e.preventDefault();\n        const { username, email, password } = this.state;\n\n        this.setState({ bLoading: true });\n        signUp({\n            username: username,\n            email: email,\n            password: password\n        }).then(data => {\n            this.setState({ \n                bLoading: false,\n                signupSuccess: true,\n                usernameError: \"\",\n                emailError: \"\",\n                signupError: \"\"\n            });\n\n        }).catch( err => {\n            console.log(err);\n            switch(err.status) {\n                case 400:\n                    this.setState({\n                        usernameError: \"\",\n                        emailError: \"E-mail already registered\"\n                    });\n                    break;\n\n                case 401:\n                    this.setState({\n                        usernameError: \"Username already registered\",\n                        emailError: \"\"\n                    });\n                    break;\n\n                case 500:\n                    this.setState({\n                        signupError: \"Internal server error\"\n                    });\n                    break;\n                \n            }\n            this.setState({ bLoading: false });\n        });\n    }\n\n    render () {\n        const { bLoading, usernameError, emailError, signupError, signupSuccess } = this.state;\n\n        return (\n            <div className=\"page signup\">\n                <div className=\"page-single\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col col-login mx-auto\">\n                                <div className=\"text-center mb-6\">\n                                    <img src=\"authback.png\" className=\"h-6\" alt=\"Health Tree Logo\" />\n                                </div>\n                                <Form\n                                    className=\"card\"\n                                    onSubmit={this.handleLogin}\n                                    method=\"POST\">\n\n                                    <Card.Body className=\"p-6\">\n                                        { signupError && \n                                            <Alert type=\"danger\">{signupError}</Alert>\n                                        }\n\n                                        { signupSuccess && \n                                            <Alert type=\"success\">Account was created. Please verify account through E-mail.</Alert>\n                                        }\n\n                                        <Card.Title RootComponent=\"div\">Create New Account</Card.Title>\n                                        <FormTextInput\n                                            name=\"username\"\n                                            label=\"Username\"\n                                            placeholder=\"Enter username\"\n                                            onChange={this.updateForm}\n                                            error={usernameError}\n                                            required\n                                            />\n\n                                        <FormTextInput\n                                            name=\"email\"\n                                            label=\"Email\"\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            onChange={this.updateForm}\n                                            error={emailError}\n                                            required\n                                            />\n\n                                        <FormTextInput\n                                            name=\"password\"\n                                            type=\"password\"\n                                            label=\"Password\"\n                                            placeholder=\"Password\"\n                                            onChange={this.updateForm}\n                                            required\n                                            />\n                                        <Form.Footer>\n                                            <Button type=\"submit\" color=\"primary\" loading={bLoading} block>\n                                                Create Account\n                                            </Button>\n                                        </Form.Footer>\n\n                                        <div className=\"login_link\">\n                                            Already have an account? <a href=\"/signin\" className=\"link\">Sign In</a>\n                                        </div>\n                                    </Card.Body>\n                                </Form>\n                            </div>\n                        </div>\n                     </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    \n}) (SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './index.scss'\nimport {\n    Form,\n    FormTextInput,\n    Card,\n    Button,\n    Alert\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\nimport { updateUser } from 'store/actions'\n\nimport { signIn } from '../../../apis/auth';\n\nclass SignIn extends React.Component {\n\n    constructor (props) {\n\n        super (props);\n\n        this.state = {\n            bLoading: false,\n            loginError: \"\",\n            passwordError: \"\"\n        }\n\n        this.handleLogin = this.handleLogin.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount(){\n        \n    }\n\n    updateForm = evt => {\n        this.setState({\n            [evt.target.name]: evt.target.value,\n        });\n    };\n    \n    handleLogin(e) {\n        e.preventDefault();\n        const { email,  password } = this.state;\n        console.log(email, password);\n\n        this.setState({ bLoading: true });\n        signIn({\n            email: email,\n            password: password\n        }).then(data => {\n            this.setState({ bLoading: false });\n            this.props.updateUser(data);\n            this.props.history.push('/accounts')\n\n        }).catch( err => {\n            console.log(err)\n            this.setState({ bLoading: false });\n\n            switch(err.status) {\n                case 403: \n                    this.setState({\n                        loginError: \"\",\n                        passwordError: \"Invalid username/password\"\n                    });\n                    break;\n\n                case 500:\n                    this.setState({\n                        loginError: \"Internal server error\",\n                        passwordError: \"\"\n                    });\n                    break;\n            }\n        });\n    }\n    \n    render () {\n        const { bLoading, loginError, passwordError } = this.state;\n\n        return (\n\n            <div className=\"page signin\">\n                <div className=\"page-single\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col col-login mx-auto\">\n                                <div className=\"text-center mb-6\">\n                                    <img src=\"authback.png\" className=\"h-6\" alt=\"Health Tree Logo\" />\n                                </div>\n                                <Form\n                                    className=\"card\"\n                                    onSubmit={this.handleLogin}\n                                    method=\"POST\">\n\n                                    <Card.Body className=\"p-6\">\n                                        { loginError && \n                                            <Alert type=\"danger\">{loginError}</Alert>\n                                        }\n\n                                        <Card.Title RootComponent=\"div\">Sign In to Admin Account</Card.Title>\n                                        <FormTextInput\n                                            name=\"email\"\n                                            label=\"Email\"\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            onChange={this.updateForm}\n                                            error=\"\"\n                                            required\n                                            />\n                                        <FormTextInput\n                                            name=\"password\"\n                                            type=\"password\"\n                                            label=\"Password\"\n                                            placeholder=\"Password\"\n                                            error={passwordError}\n                                            onChange={this.updateForm}\n                                            required\n                                            />\n                                        <Form.Footer>\n                                            <Button type=\"submit\" color=\"primary\" loading={bLoading} block>\n                                                Sign In\n                                            </Button>\n                                        </Form.Footer>\n\n                                        {/* <div>\n                                            <a href=\"/signup\" className=\"link\">Create Account</a>\n                                            <a href=\"/forgotpass\" className=\"link right\">Forgot Password?</a>\n                                        </div> */}\n                                        \n                                    </Card.Body>\n                                </Form>\n                            </div>\n                        </div>\n                     </div>\n                </div>\n            </div>\n\n        );\n\n    }\n\n}\n\nconst mapStateToProps = (reducer ) => {\n\n    const { user } = reducer;\n\n    return { user}\n\n};\n\n\nexport default connect (mapStateToProps, {\n    updateUser\n}) (SignIn);\n","import {\n    SHOW_LOADER,\n    TOGGLE_COLLAPSED_NAV,\n    WINDOW_WIDTH,\n    UPDATE_USER,\n    SET_SETTINGS,\n} from '../actionTypes';\n\n\n/**\n *  settings\n */\n\n export function setSettings(data) {\n    return {\n        type: SET_SETTINGS,\n        payload: data\n    }; \n }\n\n/**\n * user\n */\n\nexport function updateUser(data) {\n    return {\n        type: UPDATE_USER,\n        payload: data\n    };\n}\n\n\n/**\n * Ui\n */\n\nexport const toggleCollapsedNav = (isNavCollapsed) => {\n    return {\n        type: TOGGLE_COLLAPSED_NAV, \n        payload: isNavCollapsed\n    };\n};\n\nexport const updateWindowWidth = (width) => {\n    return {\n        type: WINDOW_WIDTH,\n        payload: width\n    };\n}\n\nexport function showLoader(flag){\n    return {\n        type: SHOW_LOADER,\n        payload: flag\n    };\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport {\n    Form,\n    FormTextInput,\n    Card,\n    Button,\n    Alert\n} from 'tabler-react';\nimport \"tabler-react/dist/Tabler.css\";\nimport './index.scss'\n\nimport { passwordReset } from '../../../apis/auth';\n\nclass ResetPass extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            \n        }\n        this.resetPass = this.resetPass.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount(){\n        \n    }\n    \n    updateForm = evt => {\n        this.setState({\n            [evt.target.name]: evt.target.value,\n        });\n    };\n    \n    resetPass(event) {\n        event.preventDefault();\n\n        const { email } = this.state;\n\n        this.setState({ bLoading: true });\n        passwordReset({\n            mail: email\n        }).then(data => {\n            this.setState({ bLoading: false });\n            console.log(data);\n\n        }).catch( err => {\n            console.log(err)\n            this.setState({ bLoading: false });\n\n            switch(err.status) {\n                case 400:\n                    this.setState({\n                        emailError: \"User with this e-mail doesn't exist\",\n                        resetError: \"\"\n                    });\n                    break;\n\n                case 500:\n                    this.setState({\n                        resetError: \"Internal server error\",\n                        emailError: \"\"\n                    });\n                    break;\n            }\n        });\n\n    }\n\n    componentWillReceiveProps(newProps){\n        \n    }\n\n    render() {\n        const { bLoading, emailError, resetError} = this.state;\n\n        return (\n            <div className=\"page resetpass\">\n                <div className=\"page-single\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col col-login mx-auto\">\n                                <div className=\"text-center mb-6\">\n                                    <img src=\"authback.png\" className=\"h-6\" alt=\"Health Tree Logo\" />\n                                </div>\n                                <Form\n                                    className=\"card\"\n                                    onSubmit={this.resetPass}\n                                    method=\"POST\">\n\n                                    <Card.Body className=\"p-6\">\n                                        { resetError && \n                                            <Alert type=\"danger\">{resetError}</Alert>\n                                        }\n\n                                        <Card.Title RootComponent=\"div\">Forgot Password</Card.Title>\n                                        \n                                        <p className=\"text-muted\">Enter your email address and your password will be reset and emailed to you.</p>\n\n                                        <FormTextInput\n                                            name=\"email\"\n                                            label=\"Email Address\"\n                                            placeholder=\"Enter email\"\n                                            onChange={this.updateForm}\n                                            error={emailError}\n                                            required\n                                            />\n\n                                        <Form.Footer>\n                                            <Button type=\"submit\" color=\"primary\" loading={bLoading} block>\n                                                Request Password Change\n                                            </Button>\n                                        </Form.Footer>\n\n                                        <div className=\"login_link\">\n                                            Already have an account? <a href=\"/signin\" className=\"link\">Sign In</a>\n                                        </div>\n                                        \n                                    </Card.Body>\n                                </Form>\n                            </div>\n                        </div>\n                     </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reducer) => {\n\n    const { user } = reducer;\n\n    return { user }\n    \n};\n\nexport default connect (mapStateToProps, {\n    \n}) (ResetPass);\n\n","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport Routes from './routes'\nimport SignUp from './auth/signup'\nimport SignIn from './auth/signin'\nimport ResetPass from './auth/resetPass'\n\nconst RestrictedRoute = ({component: Component, user, ...rest}) =>\n    <Route {...rest} render={props =>\n        user ? <Component {...props} /> : <Redirect to={{ pathname: '/signin', state: {from: props.location} }} />}\n    />;\n\nclass Container extends React.Component {\n\n    constructor(props){\n\n        super(props);\n\n        this.state = {\n         \n        }\n\n    }\n\n    render() {\n\n        return (\n           <Switch>\n               <Route path='/signup' component={SignUp}/>\n               <Route path='/signin' component={SignIn}/>\n               <Route path='/forgotpass' component={ResetPass}/>\n               \n               <RestrictedRoute path={`${this.props.match.url}`} user={this.props.user} component={Routes}/>\n           </Switch>\n        );\n\n    }\n\n}\n\n\nconst mapStateToProps = (reducer) => {\n\n    const { user } = reducer;\n\n    return {user}\n\n};\n\n\nexport default connect(mapStateToProps, {})(Container);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport configureStore from './store';\nimport 'rc-drawer/assets/index.css';\nimport './sass/index.scss';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport Container from './containers'\n\nlibrary.add(fas);\nexport const store = configureStore ();\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Provider store={store}>\n                    <Router>\n                        <Route path=\"/\" component={Container} />\n                    </Router>\n                    <ToastContainer />\n                </Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport default function configureStore (initialState) {\n    const store = createStore (reducers, initialState);\n    return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}